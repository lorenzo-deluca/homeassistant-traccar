blueprint:
  name: Traccar Positioning
  description: Update Device Tracker positioning from Home Assistant to Traccar Server
  domain: automation
  input:
    traccar_url:
      name: Traccar Server URL
      description: Insert Traccar IP Server Address or DNS Name with protocol and
        port (example http://ip:port)
      default: http://192.168.1.1:5050
    device_trackers:
      name: Tracking Devices
      description: Select Device Tracker Devices
      selector:
        entity:
          domain:
          - device_tracker
          multiple: true

trigger:
- platform: state
  entity_id: !input device_trackers
  attribute: all

condition:
- condition: template
  value_template: '{{ trigger.from_state.state not in [''unknown'', ''unavailable'']
    }}'
- condition: template
  value_template: '{{ trigger.to_state.state not in [''unknown'', ''unavailable'']
    }}'
action:
- service: rest_command.update_traccar
  continue_on_error: true
  data:
    traccar_url: !input traccar_url
    id: '{{ trigger.entity_id }}'
    lat: '{{ state_attr(trigger.entity_id, ''latitude'')  | float(0) }}'
    lon: '{{ state_attr(trigger.entity_id, ''longitude'') | float(0) }}'
    alt: '{{ state_attr(trigger.entity_id, ''altitude'') | float(0) }}'
    batt: "{% set device_tracker = trigger.entity_id %} {% set battery_level = state_attr(device_tracker,
      'battery_level') %} {% if battery_level is not none %} \n  {{ battery_level
      | float(0) }}\n{% else %}\n  {% set sensor_entities  = states.sensor | selectattr('entity_id',
      'match', '.*' ~ device_tracker.split('.')[1] ~ '_battery_level') | map(attribute='entity_id')
      | list %}\n  {% if sensor_entities is not none and sensor_entities | length
      > 0 %}\n    {{ states(sensor_entities[0]) | float(0) }}\n  {% else %}\n    0\n
      \ {% endif %}\n{% endif %}\n"
    speed: '0'
mode: parallel
max: 10
